@use "sass:string";
@use "sass:meta";
@use "sass:list";
@use "sass:map";

@use "default";
@use "utils";

$_config: meta.module-variables(default);
$_functions: meta.module-functions(default);

/**
 * Merges the developer theme configuration with the default.
 */
@mixin set($options: ()) {
  $_config: map.merge($_config, $options) !global;

  // Some default options are dynamically generated as TailwindCSS does
  @each $name, $func in $_functions {
    @if (not map.has-key($options, $name)) {
      $_config: map.merge($_config, ($name: meta.call($func, $_config))) !global;
    }
  }

  // Deep merge the options that extend the default ones
  @if (map.has-key($options, "extend")) {
    $_config: map.deep-merge($_config, map.get($options, "extend")) !global;
  }
}

/**
 * Returns the theme property requested
 */
@function get($prop) {
  @if ($prop == null or string.length($prop) == 0) {
    @error "Invalid property provided: #{$prop}";
  }

  $keys: utils.str-split($prop, ".");

  $result: $_config;

  @each $key in $keys {
    @if (map.has-key($result, $key)) {
      $result: map.get($result, $key);
    } @else {
      $parsed-key: string.unquote($key);

      @if (map.has-key($result, $parsed-key)) {
        $result: map.get($result, $parsed-key);
      } @else {
        $parsed-key: utils.to-number($key);

        @if (map.has-key($result, $parsed-key)) {
          $result: map.get($result, $parsed-key);
        } @else {
          @error "Property not found in configuration: #{$prop}";
        }
      }
    }
  }

  @return $result;
}
